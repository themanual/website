@mixin svg {
  svg * { @content; }
}

@mixin media-object {
  float: left;
  @content;
  & + * { overflow: hidden; }
}

@mixin type-enhancements {
  text-rendering: optimizeLegibility;
  -moz-font-feature-settings:"liga=1, dlig=1";
  -ms-font-feature-settings:"liga", "dlig";
  -o-font-feature-settings:"liga", "dlig";
  -webkit-font-feature-settings:"liga", "dlig";
  font-feature-settings:"liga", "dlig";
}

@mixin max-width-columns($n) {
  max-width: flex-grid($n) / 100% * $max-width;
}

// TODO remove in favour for newest bourbon/sass
@function valueof($val) {
  @return ($val / ($val * 0 + 1));
}

@function em($value, $base: $rem-value) {
  @if not unitless($value) {
      $value: strip-units($value);
  }
  @if not unitless($base) {
      $base: strip-units($base);
  }
  @return ($value / $base) * 1em;
}

@mixin rem($props, $value, $base: $rem-base) {
  @if unitless($value)    { $value: $value * 1px; }
  @if not unitless($base) { $base: valueof($base); }

  @each $prop in $props {
    @if unit($value) == "px"
    {
      #{$prop}: $value;
      #{$prop}: (valueof($value) / $base) * 1rem;
    }
    @else if unit($value) == "rem"
    {
      #{$prop}: (valueof($value) * $base) * 1px;
      #{$prop}: $value;
    }
  }
}

@mixin opacity($opacity) {
  opacity: $opacity;
  // IE8 filter
  $opacity-ie: ($opacity * 100);
  filter: #{alpha(opacity=$opacity-ie)};
}

@mixin animation-fix {
  * { -webkit-transform: translateZ(0px); }
}

@mixin middot-break($h:.5em) {
  display: block; visibility: hidden; height: $h;
}

@function divider() {
  @return solid 1px $c-divider;
}

%visuallyhidden {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height: 1px; width: 1px;
  margin: -1px; padding: 0; border: 0;
}