// General Colors
$c-text-white:          hsl(0, 0%, 100.0%);
$c-text-black:          hsl(0, 0%,   0.0%);

$c-text-body:           hsl(0, 0%,  15.0%);
$c-text-summary:        hsl(0, 0%,  22.5%);
$c-text-gray:           hsl(0, 0%,  30.0%);
$c-text-caption:        hsl(0, 0%,  45.0%);

$c-text-faint-less:     hsl(0, 0%,  55.0%);
$c-text-faint:          hsl(0, 0%,  60.0%);
$c-text-faint-more:     hsl(0, 0%,  70.0%);

$c-divider:             gray(87.5%);
$c-divider-dark:        darken($c-divider, 5%);
$c-divider-darker:      darken($c-divider, 15%);
$c-icon-gray:           darken($c-divider, 20%);
$c-bg-gray:             gray(97%);

$c-highlight: #FFFBDC;

$c-blue:    #0055DD;
$c-purple:  #8200E6;

$c-success: hsl(120,  60%, 50%);
$c-error:   hsl(360, 100%, 65%);
$c-warning: hsl( 40, 100%, 65%);

$c-kickstarter: #2BDE73;

// Published issues, and issues colors
$issues:        (1, 2, 3, 4, 5);
$issues-colors: (#ED3D45, #51B9E0, #ED9C31, #00CFB5, #8F46B9);

// Returns the color of issue $i or 'latest'
@function issue-color($i) {
  @if $i == 'latest'  { @return issue-color(nth($issues, length($issues))); }
  @else { @return nth($issues-colors, $i); }
}

// Prefixes the CSS rule which calls the mixin
// with .issue-N and sets $props to that issueâ€™s color
// Also takes block content for more properties.
@mixin color-by-issue($props) {
  @each $i in $issues {
    .issue-#{$i} & {
      @each $prop in $props {
        #{$prop}: issue-color($i);
        @content;
      }
    }
  }
}

@mixin color-by-issue-self($props) {
  @each $i in $issues {
    &.issue-#{$i} {
      @each $prop in $props {
        #{$prop}: issue-color($i);
        @content;
      }
    }
  }
}